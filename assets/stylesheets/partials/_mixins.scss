//
// Mixins
// --------------------------------------------------
@mixin breakpoint($point) {
  @if $point == bp-1 {
    @media (max-width: $bp-1) { @content; }
  }
  @else if $point == bp-2 {
    @media (max-width: $bp-2) { @content; }
  }
  @else if $point == bp-3 {
    @media (max-width: $bp-3)  { @content; }
  }
  @else if $point == bp-4 {
    @media (max-width: $bp-4)  { @content; }
  }
  @else if $point == bp-5 {
    @media (max-width: $bp-5)  { @content; }
  }
  @else if $point == bp-6 {
    @media (max-width: $bp-6)  { @content; }
  }
  @else if $point == bp-7 {
    @media (max-width: $bp-7)  { @content; }
  }
  @else if $point == bp-8 {
    @media (max-width: $bp-8)  { @content; }
  }
}

@mixin animation($properties) {
  -webkit-animation: $properties;
     -moz-animation: $properties;
       -o-animation: $properties;
          animation: $properties;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
          border-radius: $radius;
          
}

@mixin box-sizing($boxmodel: border-box) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

@mixin box-shadow($properties) {
  -webkit-box-shadow: $properties;
     -moz-box-shadow: $properties;
          box-shadow: $properties;
}

@mixin inline-block {
  display: inline-block;
  zoom: 1;
  *display: inline;
}

@mixin opacity($value) {
  opacity: $value / 100;
  filter: alpha(opacity=$value);
}

// User select
// For selecting text on the page
@mixin user-select($select) {
  -webkit-user-select: $select;
     -moz-user-select: $select;
      -ms-user-select: $select;
       -o-user-select: $select;
          user-select: $select;
}
 
@mixin placeholder ($height, $color, $padding) {
  &:-moz-placeholder {
    line-height: $height;
    color: $color;
    padding: $padding;
  }
  &::-moz-placeholder {
    line-height: $height;
    color: $color;
    padding: $padding;
  }
  &::-ms-input-placeholder {
    line-height: $height;
    color: $color;
    padding: $padding;
  }
  &::-webkit-input-placeholder {
    line-height: $height;
    color: $color;
    padding: $padding;
  }
  &.placeholder {
    line-height: $height;
    color: $color;
    padding: $padding;
  }
}

@mixin mask($mask...) {
  -webkit-mask: $mask;
          mask: $mask;
}

@mixin transition($properties) {
  -webkit-transition: $properties;
     -moz-transition: $properties;
       -o-transition: $properties;
          transition: $properties;
  //-webkit-backface-visibility: hidden;
}

@mixin transform($properties) {
  -webkit-transform: $properties;
     -moz-transform: $properties;
      -ms-transform: $properties;
       -o-transform: $properties;
          transform: $properties;
}

@mixin vertical-gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $from), color-stop(100%, $to));
  background: -webkit-linear-gradient(top, $from, $to);
  background:    -moz-linear-gradient(top, $from, $to);
  background:     -ms-linear-gradient(top, $from, $to);
  background:      -o-linear-gradient(top, $from, $to);
  background:   linear-gradient(to bottom, $from, $to);
}

@mixin selection($color) {
  &::selection {
    background: $color;
  }
  &::-moz-selection {
    background: $color;
  }
}

@mixin dropdown-arrow($color: $base, $top: 5px, $left: 15px, $size: 9px) {
  &:before {
    content: "";
    border-style: solid;
    border-width: 0 $size $size $size;
    border-color: transparent transparent $color transparent;
    height: 0;
    position: absolute;
    left: $left;
    top: $top;
    width: 0;
    // Make corners smooth
    -webkit-transform: rotate(360deg);
  }
}

@mixin drop-ie-gradient {
  filter: unquote("progid:DXImageTransform.Microsoft.gradient(enabled = false)");
}

@mixin text-config ($family, $size, $weight, $margin, $padding, $color, $line-height, $letter-spacing) {
  font-family: $family;
  font-size: $size;
  font-weight: $weight; 
  margin: $margin;
  padding: $padding;
  color: $color;
  line-height: $line-height;
  letter-spacing: $letter-spacing;
}

@mixin button-config($color, $hover, $active, $button-text-color, $button-text-color-hover) {
  background-color: $color;
  color: $button-text-color;

  &:hover,
  &:focus,
  .btn-group:focus &.dropdown-toggle {
    background-color: $hover;
    color: $button-text-color-hover;
  }
  &:active,
  .btn-group.open &.dropdown-toggle,
  &.active {
    background-color: $active;
    color: $button-text-color-active;
  }
}

@mixin dropdown-arrow-inverse {
  border-bottom-color: $base !important;
  border-top-color: $base !important;
}

@mixin input-states($color) {
  border-color: $color;
  color: $color;
  @include box-shadow(none);

  &:focus {
    @include box-shadow(none);
  }
}

@mixin swap-pagination-color($color, $hover, $active) {
  ul {
    background-color: $color;

    li {
      &.previous {
        > a {
          border-right-color: mix($color, white, 66%);
        }
      }
      > a, > span {
        border-left-color: mix($color, white, 66%);

        &:hover, &:focus {
          background-color: $hover;
        }
        &:active {
          background-color: $active;
        }
      }
      &.active {
        > a, > span {
          background-color: $active;
        }
      }

      &.pagination-dropdown.dropup {
        .dropdown-arrow {
          border-top-color: $color;
        }
      }
    }
  }
}

// Color swatches grid
// [SCSS] Added extra params since SCSS doesn't support variable variables
@mixin calc-color($first-color-name, $first-color) {
  .palette-#{$first-color-name} {
    background-color: $first-color;
  }
}

//====================================
// HELPERS
//====================================
// Helpers are non-semantic, global utilities.
// Helpers should not include theme specifics: color, images, etc.
// Helpers are created as SASS Mixins so they can be "mixed-in" to other SASS declarations and not be forced into the markup.
// SASS Mixins:
// http://sass-lang.com/
// Many Helpers inspired by HTML5 Boilerplate:
// http://html5boilerplate.com/

// For image replacement
@mixin ir() {
  display       : block;
  text-indent     : -999em;
  overflow      : hidden;
  background-repeat : no-repeat;
  text-align      : left;
  direction     : ltr;
}

// Hide for both screenreaders and browsers:
// css-discuss.incutio.com/wiki/Screenreader_Visibility
@mixin hidden() {
  display   : none; 
  visibility  : hidden;
}

// Hide only visually, but have it available for screenreaders: by Jon Neal.
// www.webaim.org/techniques/css/invisiblecontent/  &  j.mp/visuallyhidden
@mixin visuallyhidden($focusable: false) { 
  border    : 0;
  clip    : rect(0 0 0 0);
  height    : 1px;
  margin    : -1px;
  overflow  : hidden;
  padding   : 0;
  position  : absolute;
  width   : 1px;
  @if $focusable == true {@include focusable(true);}
}
// Extends the .visuallyhidden class to allow the element to be focusable when navigated to via the keyboard: drupal.org/node/897638
@mixin focusable() {
  &:focus,
  &:active {
    clip  : auto;
    height  : auto;
    margin  : 0;
    overflow: visible;
    position: static;
    width : auto;
  }
}

// Hide visually and from screenreaders, but maintain layout
@mixin invisible() {
  visibility  : hidden;
}

// The Magnificent Clearfix: Updated to prevent margin-collapsing on child elements.
//   j.mp/bestclearfix
// Fix clearfix: blueprintcss.lighthouseapp.com/projects/15318/tickets/5-extra-margin-padding-bottom-of-page
@mixin clearfix() {
  &:before,
  &:after {
    content : "\0020";
    display : block;
    height  : 0;
    overflow: hidden; 
  }
  &:after {
    clear : both;
  }
  zoom    : 1;
}

@mixin vertical-align {
  position: relative;
  top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// background opacity from: http://thesassway.com/intermediate/mixins-for-semi-transparent-colors
@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}

//
// Helper classes and placeholders
// --------------------------------------------------

%pull-left {
  float: left;
}

%pull-right {
  float: right;
}

%vertical-align {
  position: relative;
  top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

%center-align {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

%table-stripe-even {
    tr:nth-of-type(even) {
    background: rgba(0,0,0,.5);
  }
}

%table-stripe-odd {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.pull-left {
  float: left;
}

.pull-right {
  float: right;
}